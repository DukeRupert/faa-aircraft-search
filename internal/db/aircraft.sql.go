// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: aircraft.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countAircraft = `-- name: CountAircraft :one
SELECT COUNT(*) FROM aircraft_data
`

func (q *Queries) CountAircraft(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countAircraft)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countSearchAircraft = `-- name: CountSearchAircraft :one
SELECT COUNT(*) FROM aircraft_data
WHERE 
    UPPER(icao_code) LIKE UPPER($1::text) OR 
    UPPER(faa_designator) LIKE UPPER($1::text) OR 
    UPPER(manufacturer) LIKE UPPER($1::text) OR 
    UPPER(model_faa) LIKE UPPER($1::text)
`

func (q *Queries) CountSearchAircraft(ctx context.Context, searchTerm string) (int64, error) {
	row := q.db.QueryRow(ctx, countSearchAircraft, searchTerm)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAircraftData = `-- name: CreateAircraftData :one
INSERT INTO aircraft_data (
    icao_code, faa_designator, manufacturer, model_faa, model_bada,
    physical_class_engine, num_engines, aac, aac_minimum, aac_maximum,
    adg, tdg, approach_speed_knot, approach_speed_minimum_knot, approach_speed_maximum_knot,
    wingspan_ft_without_winglets_sharklets, wingspan_ft_with_winglets_sharklets,
    length_ft, tail_height_at_oew_ft, wheelbase_ft, cockpit_to_main_gear_ft,
    main_gear_width_ft, mtow_lb, malw_lb, main_gear_config, icao_wtc,
    parking_area_ft2, class, faa_weight, cwt, one_half_wake_category,
    two_wake_category_appx_a, two_wake_category_appx_b, rotor_diameter_ft,
    srs, lahso, faa_registry, registration_count, tmfs_operations_fy24,
    remarks, last_update
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15,
    $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28,
    $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41
) RETURNING id, icao_code, faa_designator, manufacturer, model_faa, model_bada, physical_class_engine, num_engines, aac, aac_minimum, aac_maximum, adg, tdg, approach_speed_knot, approach_speed_minimum_knot, approach_speed_maximum_knot, wingspan_ft_without_winglets_sharklets, wingspan_ft_with_winglets_sharklets, length_ft, tail_height_at_oew_ft, wheelbase_ft, cockpit_to_main_gear_ft, main_gear_width_ft, mtow_lb, malw_lb, main_gear_config, icao_wtc, parking_area_ft2, class, faa_weight, cwt, one_half_wake_category, two_wake_category_appx_a, two_wake_category_appx_b, rotor_diameter_ft, srs, lahso, faa_registry, registration_count, tmfs_operations_fy24, remarks, last_update, created_at, updated_at
`

type CreateAircraftDataParams struct {
	IcaoCode                           pgtype.Text    `json:"icao_code"`
	FaaDesignator                      pgtype.Text    `json:"faa_designator"`
	Manufacturer                       pgtype.Text    `json:"manufacturer"`
	ModelFaa                           pgtype.Text    `json:"model_faa"`
	ModelBada                          pgtype.Text    `json:"model_bada"`
	PhysicalClassEngine                pgtype.Text    `json:"physical_class_engine"`
	NumEngines                         pgtype.Int4    `json:"num_engines"`
	Aac                                pgtype.Text    `json:"aac"`
	AacMinimum                         pgtype.Text    `json:"aac_minimum"`
	AacMaximum                         pgtype.Text    `json:"aac_maximum"`
	Adg                                pgtype.Text    `json:"adg"`
	Tdg                                pgtype.Text    `json:"tdg"`
	ApproachSpeedKnot                  pgtype.Int4    `json:"approach_speed_knot"`
	ApproachSpeedMinimumKnot           pgtype.Int4    `json:"approach_speed_minimum_knot"`
	ApproachSpeedMaximumKnot           pgtype.Int4    `json:"approach_speed_maximum_knot"`
	WingspanFtWithoutWingletsSharklets pgtype.Numeric `json:"wingspan_ft_without_winglets_sharklets"`
	WingspanFtWithWingletsSharklets    pgtype.Numeric `json:"wingspan_ft_with_winglets_sharklets"`
	LengthFt                           pgtype.Numeric `json:"length_ft"`
	TailHeightAtOewFt                  pgtype.Numeric `json:"tail_height_at_oew_ft"`
	WheelbaseFt                        pgtype.Numeric `json:"wheelbase_ft"`
	CockpitToMainGearFt                pgtype.Numeric `json:"cockpit_to_main_gear_ft"`
	MainGearWidthFt                    pgtype.Numeric `json:"main_gear_width_ft"`
	MtowLb                             pgtype.Int4    `json:"mtow_lb"`
	MalwLb                             pgtype.Int4    `json:"malw_lb"`
	MainGearConfig                     pgtype.Text    `json:"main_gear_config"`
	IcaoWtc                            pgtype.Text    `json:"icao_wtc"`
	ParkingAreaFt2                     pgtype.Numeric `json:"parking_area_ft2"`
	Class                              pgtype.Text    `json:"class"`
	FaaWeight                          pgtype.Text    `json:"faa_weight"`
	Cwt                                pgtype.Text    `json:"cwt"`
	OneHalfWakeCategory                pgtype.Text    `json:"one_half_wake_category"`
	TwoWakeCategoryAppxA               pgtype.Text    `json:"two_wake_category_appx_a"`
	TwoWakeCategoryAppxB               pgtype.Text    `json:"two_wake_category_appx_b"`
	RotorDiameterFt                    pgtype.Numeric `json:"rotor_diameter_ft"`
	Srs                                pgtype.Text    `json:"srs"`
	Lahso                              pgtype.Text    `json:"lahso"`
	FaaRegistry                        pgtype.Text    `json:"faa_registry"`
	RegistrationCount                  pgtype.Int4    `json:"registration_count"`
	TmfsOperationsFy24                 pgtype.Int4    `json:"tmfs_operations_fy24"`
	Remarks                            pgtype.Text    `json:"remarks"`
	LastUpdate                         pgtype.Text    `json:"last_update"`
}

func (q *Queries) CreateAircraftData(ctx context.Context, arg CreateAircraftDataParams) (AircraftDatum, error) {
	row := q.db.QueryRow(ctx, createAircraftData,
		arg.IcaoCode,
		arg.FaaDesignator,
		arg.Manufacturer,
		arg.ModelFaa,
		arg.ModelBada,
		arg.PhysicalClassEngine,
		arg.NumEngines,
		arg.Aac,
		arg.AacMinimum,
		arg.AacMaximum,
		arg.Adg,
		arg.Tdg,
		arg.ApproachSpeedKnot,
		arg.ApproachSpeedMinimumKnot,
		arg.ApproachSpeedMaximumKnot,
		arg.WingspanFtWithoutWingletsSharklets,
		arg.WingspanFtWithWingletsSharklets,
		arg.LengthFt,
		arg.TailHeightAtOewFt,
		arg.WheelbaseFt,
		arg.CockpitToMainGearFt,
		arg.MainGearWidthFt,
		arg.MtowLb,
		arg.MalwLb,
		arg.MainGearConfig,
		arg.IcaoWtc,
		arg.ParkingAreaFt2,
		arg.Class,
		arg.FaaWeight,
		arg.Cwt,
		arg.OneHalfWakeCategory,
		arg.TwoWakeCategoryAppxA,
		arg.TwoWakeCategoryAppxB,
		arg.RotorDiameterFt,
		arg.Srs,
		arg.Lahso,
		arg.FaaRegistry,
		arg.RegistrationCount,
		arg.TmfsOperationsFy24,
		arg.Remarks,
		arg.LastUpdate,
	)
	var i AircraftDatum
	err := row.Scan(
		&i.ID,
		&i.IcaoCode,
		&i.FaaDesignator,
		&i.Manufacturer,
		&i.ModelFaa,
		&i.ModelBada,
		&i.PhysicalClassEngine,
		&i.NumEngines,
		&i.Aac,
		&i.AacMinimum,
		&i.AacMaximum,
		&i.Adg,
		&i.Tdg,
		&i.ApproachSpeedKnot,
		&i.ApproachSpeedMinimumKnot,
		&i.ApproachSpeedMaximumKnot,
		&i.WingspanFtWithoutWingletsSharklets,
		&i.WingspanFtWithWingletsSharklets,
		&i.LengthFt,
		&i.TailHeightAtOewFt,
		&i.WheelbaseFt,
		&i.CockpitToMainGearFt,
		&i.MainGearWidthFt,
		&i.MtowLb,
		&i.MalwLb,
		&i.MainGearConfig,
		&i.IcaoWtc,
		&i.ParkingAreaFt2,
		&i.Class,
		&i.FaaWeight,
		&i.Cwt,
		&i.OneHalfWakeCategory,
		&i.TwoWakeCategoryAppxA,
		&i.TwoWakeCategoryAppxB,
		&i.RotorDiameterFt,
		&i.Srs,
		&i.Lahso,
		&i.FaaRegistry,
		&i.RegistrationCount,
		&i.TmfsOperationsFy24,
		&i.Remarks,
		&i.LastUpdate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAllAircraftData = `-- name: DeleteAllAircraftData :exec
DELETE FROM aircraft_data
`

func (q *Queries) DeleteAllAircraftData(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteAllAircraftData)
	return err
}

const getAircraft = `-- name: GetAircraft :one
SELECT id, icao_code, faa_designator, manufacturer, model_faa, model_bada, physical_class_engine, num_engines, aac, aac_minimum, aac_maximum, adg, tdg, approach_speed_knot, approach_speed_minimum_knot, approach_speed_maximum_knot, wingspan_ft_without_winglets_sharklets, wingspan_ft_with_winglets_sharklets, length_ft, tail_height_at_oew_ft, wheelbase_ft, cockpit_to_main_gear_ft, main_gear_width_ft, mtow_lb, malw_lb, main_gear_config, icao_wtc, parking_area_ft2, class, faa_weight, cwt, one_half_wake_category, two_wake_category_appx_a, two_wake_category_appx_b, rotor_diameter_ft, srs, lahso, faa_registry, registration_count, tmfs_operations_fy24, remarks, last_update, created_at, updated_at FROM aircraft_data
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAircraft(ctx context.Context, id int32) (AircraftDatum, error) {
	row := q.db.QueryRow(ctx, getAircraft, id)
	var i AircraftDatum
	err := row.Scan(
		&i.ID,
		&i.IcaoCode,
		&i.FaaDesignator,
		&i.Manufacturer,
		&i.ModelFaa,
		&i.ModelBada,
		&i.PhysicalClassEngine,
		&i.NumEngines,
		&i.Aac,
		&i.AacMinimum,
		&i.AacMaximum,
		&i.Adg,
		&i.Tdg,
		&i.ApproachSpeedKnot,
		&i.ApproachSpeedMinimumKnot,
		&i.ApproachSpeedMaximumKnot,
		&i.WingspanFtWithoutWingletsSharklets,
		&i.WingspanFtWithWingletsSharklets,
		&i.LengthFt,
		&i.TailHeightAtOewFt,
		&i.WheelbaseFt,
		&i.CockpitToMainGearFt,
		&i.MainGearWidthFt,
		&i.MtowLb,
		&i.MalwLb,
		&i.MainGearConfig,
		&i.IcaoWtc,
		&i.ParkingAreaFt2,
		&i.Class,
		&i.FaaWeight,
		&i.Cwt,
		&i.OneHalfWakeCategory,
		&i.TwoWakeCategoryAppxA,
		&i.TwoWakeCategoryAppxB,
		&i.RotorDiameterFt,
		&i.Srs,
		&i.Lahso,
		&i.FaaRegistry,
		&i.RegistrationCount,
		&i.TmfsOperationsFy24,
		&i.Remarks,
		&i.LastUpdate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllAircraft = `-- name: GetAllAircraft :many
SELECT id, icao_code, faa_designator, manufacturer, model_faa, model_bada, physical_class_engine, num_engines, aac, aac_minimum, aac_maximum, adg, tdg, approach_speed_knot, approach_speed_minimum_knot, approach_speed_maximum_knot, wingspan_ft_without_winglets_sharklets, wingspan_ft_with_winglets_sharklets, length_ft, tail_height_at_oew_ft, wheelbase_ft, cockpit_to_main_gear_ft, main_gear_width_ft, mtow_lb, malw_lb, main_gear_config, icao_wtc, parking_area_ft2, class, faa_weight, cwt, one_half_wake_category, two_wake_category_appx_a, two_wake_category_appx_b, rotor_diameter_ft, srs, lahso, faa_registry, registration_count, tmfs_operations_fy24, remarks, last_update, created_at, updated_at FROM aircraft_data
ORDER BY manufacturer, model_faa
LIMIT $1 OFFSET $2
`

type GetAllAircraftParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllAircraft(ctx context.Context, arg GetAllAircraftParams) ([]AircraftDatum, error) {
	rows, err := q.db.Query(ctx, getAllAircraft, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AircraftDatum{}
	for rows.Next() {
		var i AircraftDatum
		if err := rows.Scan(
			&i.ID,
			&i.IcaoCode,
			&i.FaaDesignator,
			&i.Manufacturer,
			&i.ModelFaa,
			&i.ModelBada,
			&i.PhysicalClassEngine,
			&i.NumEngines,
			&i.Aac,
			&i.AacMinimum,
			&i.AacMaximum,
			&i.Adg,
			&i.Tdg,
			&i.ApproachSpeedKnot,
			&i.ApproachSpeedMinimumKnot,
			&i.ApproachSpeedMaximumKnot,
			&i.WingspanFtWithoutWingletsSharklets,
			&i.WingspanFtWithWingletsSharklets,
			&i.LengthFt,
			&i.TailHeightAtOewFt,
			&i.WheelbaseFt,
			&i.CockpitToMainGearFt,
			&i.MainGearWidthFt,
			&i.MtowLb,
			&i.MalwLb,
			&i.MainGearConfig,
			&i.IcaoWtc,
			&i.ParkingAreaFt2,
			&i.Class,
			&i.FaaWeight,
			&i.Cwt,
			&i.OneHalfWakeCategory,
			&i.TwoWakeCategoryAppxA,
			&i.TwoWakeCategoryAppxB,
			&i.RotorDiameterFt,
			&i.Srs,
			&i.Lahso,
			&i.FaaRegistry,
			&i.RegistrationCount,
			&i.TmfsOperationsFy24,
			&i.Remarks,
			&i.LastUpdate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchAircraft = `-- name: SearchAircraft :many
SELECT id, icao_code, faa_designator, manufacturer, model_faa, model_bada, physical_class_engine, num_engines, aac, aac_minimum, aac_maximum, adg, tdg, approach_speed_knot, approach_speed_minimum_knot, approach_speed_maximum_knot, wingspan_ft_without_winglets_sharklets, wingspan_ft_with_winglets_sharklets, length_ft, tail_height_at_oew_ft, wheelbase_ft, cockpit_to_main_gear_ft, main_gear_width_ft, mtow_lb, malw_lb, main_gear_config, icao_wtc, parking_area_ft2, class, faa_weight, cwt, one_half_wake_category, two_wake_category_appx_a, two_wake_category_appx_b, rotor_diameter_ft, srs, lahso, faa_registry, registration_count, tmfs_operations_fy24, remarks, last_update, created_at, updated_at FROM aircraft_data
WHERE 
    UPPER(icao_code) LIKE UPPER($3::text) OR 
    UPPER(faa_designator) LIKE UPPER($3::text) OR 
    UPPER(manufacturer) LIKE UPPER($3::text) OR 
    UPPER(model_faa) LIKE UPPER($3::text)
ORDER BY manufacturer, model_faa
LIMIT $1 OFFSET $2
`

type SearchAircraftParams struct {
	Limit      int32  `json:"limit"`
	Offset     int32  `json:"offset"`
	SearchTerm string `json:"search_term"`
}

func (q *Queries) SearchAircraft(ctx context.Context, arg SearchAircraftParams) ([]AircraftDatum, error) {
	rows, err := q.db.Query(ctx, searchAircraft, arg.Limit, arg.Offset, arg.SearchTerm)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AircraftDatum{}
	for rows.Next() {
		var i AircraftDatum
		if err := rows.Scan(
			&i.ID,
			&i.IcaoCode,
			&i.FaaDesignator,
			&i.Manufacturer,
			&i.ModelFaa,
			&i.ModelBada,
			&i.PhysicalClassEngine,
			&i.NumEngines,
			&i.Aac,
			&i.AacMinimum,
			&i.AacMaximum,
			&i.Adg,
			&i.Tdg,
			&i.ApproachSpeedKnot,
			&i.ApproachSpeedMinimumKnot,
			&i.ApproachSpeedMaximumKnot,
			&i.WingspanFtWithoutWingletsSharklets,
			&i.WingspanFtWithWingletsSharklets,
			&i.LengthFt,
			&i.TailHeightAtOewFt,
			&i.WheelbaseFt,
			&i.CockpitToMainGearFt,
			&i.MainGearWidthFt,
			&i.MtowLb,
			&i.MalwLb,
			&i.MainGearConfig,
			&i.IcaoWtc,
			&i.ParkingAreaFt2,
			&i.Class,
			&i.FaaWeight,
			&i.Cwt,
			&i.OneHalfWakeCategory,
			&i.TwoWakeCategoryAppxA,
			&i.TwoWakeCategoryAppxB,
			&i.RotorDiameterFt,
			&i.Srs,
			&i.Lahso,
			&i.FaaRegistry,
			&i.RegistrationCount,
			&i.TmfsOperationsFy24,
			&i.Remarks,
			&i.LastUpdate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertAircraftData = `-- name: UpsertAircraftData :one
INSERT INTO aircraft_data (
    icao_code, faa_designator, manufacturer, model_faa, model_bada,
    physical_class_engine, num_engines, aac, aac_minimum, aac_maximum,
    adg, tdg, approach_speed_knot, approach_speed_minimum_knot, approach_speed_maximum_knot,
    wingspan_ft_without_winglets_sharklets, wingspan_ft_with_winglets_sharklets,
    length_ft, tail_height_at_oew_ft, wheelbase_ft, cockpit_to_main_gear_ft,
    main_gear_width_ft, mtow_lb, malw_lb, main_gear_config, icao_wtc,
    parking_area_ft2, class, faa_weight, cwt, one_half_wake_category,
    two_wake_category_appx_a, two_wake_category_appx_b, rotor_diameter_ft,
    srs, lahso, faa_registry, registration_count, tmfs_operations_fy24,
    remarks, last_update
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15,
    $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28,
    $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41
)
ON CONFLICT (icao_code, faa_designator) DO UPDATE SET
    manufacturer = EXCLUDED.manufacturer,
    model_faa = EXCLUDED.model_faa,
    model_bada = EXCLUDED.model_bada,
    physical_class_engine = EXCLUDED.physical_class_engine,
    num_engines = EXCLUDED.num_engines,
    aac = EXCLUDED.aac,
    aac_minimum = EXCLUDED.aac_minimum,
    aac_maximum = EXCLUDED.aac_maximum,
    adg = EXCLUDED.adg,
    tdg = EXCLUDED.tdg,
    approach_speed_knot = EXCLUDED.approach_speed_knot,
    approach_speed_minimum_knot = EXCLUDED.approach_speed_minimum_knot,
    approach_speed_maximum_knot = EXCLUDED.approach_speed_maximum_knot,
    wingspan_ft_without_winglets_sharklets = EXCLUDED.wingspan_ft_without_winglets_sharklets,
    wingspan_ft_with_winglets_sharklets = EXCLUDED.wingspan_ft_with_winglets_sharklets,
    length_ft = EXCLUDED.length_ft,
    tail_height_at_oew_ft = EXCLUDED.tail_height_at_oew_ft,
    wheelbase_ft = EXCLUDED.wheelbase_ft,
    cockpit_to_main_gear_ft = EXCLUDED.cockpit_to_main_gear_ft,
    main_gear_width_ft = EXCLUDED.main_gear_width_ft,
    mtow_lb = EXCLUDED.mtow_lb,
    malw_lb = EXCLUDED.malw_lb,
    main_gear_config = EXCLUDED.main_gear_config,
    icao_wtc = EXCLUDED.icao_wtc,
    parking_area_ft2 = EXCLUDED.parking_area_ft2,
    class = EXCLUDED.class,
    faa_weight = EXCLUDED.faa_weight,
    cwt = EXCLUDED.cwt,
    one_half_wake_category = EXCLUDED.one_half_wake_category,
    two_wake_category_appx_a = EXCLUDED.two_wake_category_appx_a,
    two_wake_category_appx_b = EXCLUDED.two_wake_category_appx_b,
    rotor_diameter_ft = EXCLUDED.rotor_diameter_ft,
    srs = EXCLUDED.srs,
    lahso = EXCLUDED.lahso,
    faa_registry = EXCLUDED.faa_registry,
    registration_count = EXCLUDED.registration_count,
    tmfs_operations_fy24 = EXCLUDED.tmfs_operations_fy24,
    remarks = EXCLUDED.remarks,
    last_update = EXCLUDED.last_update,
    updated_at = CURRENT_TIMESTAMP
RETURNING id, icao_code, faa_designator, manufacturer, model_faa, model_bada, physical_class_engine, num_engines, aac, aac_minimum, aac_maximum, adg, tdg, approach_speed_knot, approach_speed_minimum_knot, approach_speed_maximum_knot, wingspan_ft_without_winglets_sharklets, wingspan_ft_with_winglets_sharklets, length_ft, tail_height_at_oew_ft, wheelbase_ft, cockpit_to_main_gear_ft, main_gear_width_ft, mtow_lb, malw_lb, main_gear_config, icao_wtc, parking_area_ft2, class, faa_weight, cwt, one_half_wake_category, two_wake_category_appx_a, two_wake_category_appx_b, rotor_diameter_ft, srs, lahso, faa_registry, registration_count, tmfs_operations_fy24, remarks, last_update, created_at, updated_at
`

type UpsertAircraftDataParams struct {
	IcaoCode                           pgtype.Text    `json:"icao_code"`
	FaaDesignator                      pgtype.Text    `json:"faa_designator"`
	Manufacturer                       pgtype.Text    `json:"manufacturer"`
	ModelFaa                           pgtype.Text    `json:"model_faa"`
	ModelBada                          pgtype.Text    `json:"model_bada"`
	PhysicalClassEngine                pgtype.Text    `json:"physical_class_engine"`
	NumEngines                         pgtype.Int4    `json:"num_engines"`
	Aac                                pgtype.Text    `json:"aac"`
	AacMinimum                         pgtype.Text    `json:"aac_minimum"`
	AacMaximum                         pgtype.Text    `json:"aac_maximum"`
	Adg                                pgtype.Text    `json:"adg"`
	Tdg                                pgtype.Text    `json:"tdg"`
	ApproachSpeedKnot                  pgtype.Int4    `json:"approach_speed_knot"`
	ApproachSpeedMinimumKnot           pgtype.Int4    `json:"approach_speed_minimum_knot"`
	ApproachSpeedMaximumKnot           pgtype.Int4    `json:"approach_speed_maximum_knot"`
	WingspanFtWithoutWingletsSharklets pgtype.Numeric `json:"wingspan_ft_without_winglets_sharklets"`
	WingspanFtWithWingletsSharklets    pgtype.Numeric `json:"wingspan_ft_with_winglets_sharklets"`
	LengthFt                           pgtype.Numeric `json:"length_ft"`
	TailHeightAtOewFt                  pgtype.Numeric `json:"tail_height_at_oew_ft"`
	WheelbaseFt                        pgtype.Numeric `json:"wheelbase_ft"`
	CockpitToMainGearFt                pgtype.Numeric `json:"cockpit_to_main_gear_ft"`
	MainGearWidthFt                    pgtype.Numeric `json:"main_gear_width_ft"`
	MtowLb                             pgtype.Int4    `json:"mtow_lb"`
	MalwLb                             pgtype.Int4    `json:"malw_lb"`
	MainGearConfig                     pgtype.Text    `json:"main_gear_config"`
	IcaoWtc                            pgtype.Text    `json:"icao_wtc"`
	ParkingAreaFt2                     pgtype.Numeric `json:"parking_area_ft2"`
	Class                              pgtype.Text    `json:"class"`
	FaaWeight                          pgtype.Text    `json:"faa_weight"`
	Cwt                                pgtype.Text    `json:"cwt"`
	OneHalfWakeCategory                pgtype.Text    `json:"one_half_wake_category"`
	TwoWakeCategoryAppxA               pgtype.Text    `json:"two_wake_category_appx_a"`
	TwoWakeCategoryAppxB               pgtype.Text    `json:"two_wake_category_appx_b"`
	RotorDiameterFt                    pgtype.Numeric `json:"rotor_diameter_ft"`
	Srs                                pgtype.Text    `json:"srs"`
	Lahso                              pgtype.Text    `json:"lahso"`
	FaaRegistry                        pgtype.Text    `json:"faa_registry"`
	RegistrationCount                  pgtype.Int4    `json:"registration_count"`
	TmfsOperationsFy24                 pgtype.Int4    `json:"tmfs_operations_fy24"`
	Remarks                            pgtype.Text    `json:"remarks"`
	LastUpdate                         pgtype.Text    `json:"last_update"`
}

func (q *Queries) UpsertAircraftData(ctx context.Context, arg UpsertAircraftDataParams) (AircraftDatum, error) {
	row := q.db.QueryRow(ctx, upsertAircraftData,
		arg.IcaoCode,
		arg.FaaDesignator,
		arg.Manufacturer,
		arg.ModelFaa,
		arg.ModelBada,
		arg.PhysicalClassEngine,
		arg.NumEngines,
		arg.Aac,
		arg.AacMinimum,
		arg.AacMaximum,
		arg.Adg,
		arg.Tdg,
		arg.ApproachSpeedKnot,
		arg.ApproachSpeedMinimumKnot,
		arg.ApproachSpeedMaximumKnot,
		arg.WingspanFtWithoutWingletsSharklets,
		arg.WingspanFtWithWingletsSharklets,
		arg.LengthFt,
		arg.TailHeightAtOewFt,
		arg.WheelbaseFt,
		arg.CockpitToMainGearFt,
		arg.MainGearWidthFt,
		arg.MtowLb,
		arg.MalwLb,
		arg.MainGearConfig,
		arg.IcaoWtc,
		arg.ParkingAreaFt2,
		arg.Class,
		arg.FaaWeight,
		arg.Cwt,
		arg.OneHalfWakeCategory,
		arg.TwoWakeCategoryAppxA,
		arg.TwoWakeCategoryAppxB,
		arg.RotorDiameterFt,
		arg.Srs,
		arg.Lahso,
		arg.FaaRegistry,
		arg.RegistrationCount,
		arg.TmfsOperationsFy24,
		arg.Remarks,
		arg.LastUpdate,
	)
	var i AircraftDatum
	err := row.Scan(
		&i.ID,
		&i.IcaoCode,
		&i.FaaDesignator,
		&i.Manufacturer,
		&i.ModelFaa,
		&i.ModelBada,
		&i.PhysicalClassEngine,
		&i.NumEngines,
		&i.Aac,
		&i.AacMinimum,
		&i.AacMaximum,
		&i.Adg,
		&i.Tdg,
		&i.ApproachSpeedKnot,
		&i.ApproachSpeedMinimumKnot,
		&i.ApproachSpeedMaximumKnot,
		&i.WingspanFtWithoutWingletsSharklets,
		&i.WingspanFtWithWingletsSharklets,
		&i.LengthFt,
		&i.TailHeightAtOewFt,
		&i.WheelbaseFt,
		&i.CockpitToMainGearFt,
		&i.MainGearWidthFt,
		&i.MtowLb,
		&i.MalwLb,
		&i.MainGearConfig,
		&i.IcaoWtc,
		&i.ParkingAreaFt2,
		&i.Class,
		&i.FaaWeight,
		&i.Cwt,
		&i.OneHalfWakeCategory,
		&i.TwoWakeCategoryAppxA,
		&i.TwoWakeCategoryAppxB,
		&i.RotorDiameterFt,
		&i.Srs,
		&i.Lahso,
		&i.FaaRegistry,
		&i.RegistrationCount,
		&i.TmfsOperationsFy24,
		&i.Remarks,
		&i.LastUpdate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
